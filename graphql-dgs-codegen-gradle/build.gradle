/*
 *
 *  Copyright 2020 Netflix, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
    }
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'nebula.netflixoss'
apply plugin: 'license'

dependencies {
    api project(":graphql-dgs-codegen-core")
    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.70"
    testImplementation gradleTestKit()
    testImplementation("org.assertj:assertj-core:3.11.1")
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.12'
}



// Add a source set for the functional test suite
sourceSets {
    functionalTest {

    }
}

description = 'Netflix GraphQL DGS Code Generation Plugin'

pluginBundle {
    vcsUrl = 'https://github.com/nebula-plugins/gradle-lint-plugin.git'
    description = 'Gradle plugin for generating Java and Kotlin types from GraphlQL Schema'
}


gradlePlugin {
    // Define the plugin
    plugins {
        codegen {
            id = 'codegen-gradle-plugin'
            implementationClass = 'com.netflix.graphql.dgs.codegen.gradle.CodegenPlugin'
        }
    }
}

license {
    exclude('**/*.bin')
    exclude('**/test-project/*')
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}



task createClasspathManifest {
    File outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    inputs.files project(":graphql-dgs-codegen-core").sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n') + project(":graphql-dgs-codegen-core").sourceSets.main.runtimeClasspath.join('\n')
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntimeOnly files(createClasspathManifest)
}

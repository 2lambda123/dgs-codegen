plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'java-gradle-plugin'
}

dependencies {
    api project(":graphql-dgs-codegen-core")
    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.70"
    testImplementation gradleTestKit()
    testImplementation("org.assertj:assertj-core:3.11.1")
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.12'
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {

    }
}

description = 'Netflix GraphQL DGS Code Generation Plugin'

gradlePlugin {
    // Define the plugin
    plugins {
        codegen {
            id = 'codegen-gradle-plugin'
            implementationClass = 'com.netflix.graphql.dgs.codegen.gradle.CodegenPlugin'
        }
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}



task createClasspathManifest {
    File outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    inputs.files project(":graphql-dgs-codegen-core").sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n') + project(":graphql-dgs-codegen-core").sourceSets.main.runtimeClasspath.join('\n')
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntimeOnly files(createClasspathManifest)
}

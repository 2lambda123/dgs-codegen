/*
 *
 *  Copyright 2020 Netflix, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.netflix.graphql.dgs;

import com.google.common.io.Resources;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;


import static java.nio.charset.StandardCharsets.UTF_8;
import static org.assertj.core.api.Assertions.assertThat;
import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;

/**
 * A simple unit test for the 'com.netflix.graphql.dgs.greeting' plugin.
 */
@SuppressWarnings("ConstantConditions")
public class CodegenGradlePluginTest {

    public static final String EXPECTED_PATH = "src/test/resources/test-project/build/graphql/generated/com/netflix/testproject/graphql/types/";
    public static final String EXPECTED_DEFAULT_PATH = "src/test/resources/test-project/build/generated/com/netflix/testproject/graphql/types/";
    private List<File> pluginClasspath;

    @BeforeEach
    public void before() throws IOException {
        pluginClasspath = Resources.readLines(Resources.getResource("plugin-classpath.txt"), UTF_8)
                .stream()
                .map(File::new)
                .collect(Collectors.toList());
    }

    @Test
    public void taskRegisteredSuccessfully() {
        // get a list of Gradle tasks
        BuildResult result = GradleRunner.create()
                .withProjectDir(new File("src/test/resources/test-project/"))
                .withPluginClasspath(pluginClasspath)
                .withArguments("-c", "smoke_test_settings.gradle", "tasks", "--all")
                .forwardOutput()
                .build();

        // Verify the result
        assertThat(result.getOutput()).contains("generateJava");
    }

    @Test
    public void sourcesGenerated() {
        // build a project
        BuildResult result = GradleRunner.create()
                .withProjectDir(new File("src/test/resources/test-project/"))
                .withPluginClasspath(pluginClasspath)
                .withArguments("-c", "smoke_test_settings.gradle", "clean", "build", "--stacktrace")
                .forwardOutput()
                .withDebug(true)
                .build();

        // Verify the result
        assertThat(result.task(":build").getOutcome()).isEqualTo(SUCCESS);
        // Verify that POJOs are generated in the configured directory
        assertThat(new File(EXPECTED_PATH + "Result.java").exists()).isTrue();

    }

    @Test
    public void sourcesGenerated_UsingDefaultPath() {
        // build a project
        BuildResult result = GradleRunner.create()
                .withProjectDir(new File("src/test/resources/test-project/"))
                .withPluginClasspath(pluginClasspath)
                .withArguments("-c", "smoke_test_settings_with_default_dir.gradle", "-b", "build_with_default_dir.gradle", "clean", "build", "--stacktrace")
                .forwardOutput()
                .withDebug(true)
                .build();

        // Verify the result
        assertThat(result.task(":build").getOutcome()).isEqualTo(SUCCESS);
        // Verify that POJOs are generated in the configured directory
        assertThat(new File(EXPECTED_DEFAULT_PATH + "Result.java").exists()).isTrue();
    }

    @Test
    public void sourcesGenerated_OmitNullInputFields() {
        // build a project
        BuildResult result = GradleRunner.create()
                .withProjectDir(new File("src/test/resources/test-project/"))
                .withPluginClasspath(pluginClasspath)
                .withArguments("-c", "smoke_test_settings_omit_null_input_fields.gradle", "-b", "build_omit_null_input_fields.gradle", "clean", "build", "--stacktrace")
                .forwardOutput()
                .withDebug(true)
                .build();

        // Verify the result
        assertThat(result.task(":build").getOutcome()).isEqualTo(SUCCESS);
        // Verify that POJOs are generated in the configured directory
        assertThat(new File(EXPECTED_DEFAULT_PATH + "Result.java").exists()).isTrue();
        assertThat(new File(EXPECTED_DEFAULT_PATH + "Filter.java").exists()).isTrue();
    }
}
